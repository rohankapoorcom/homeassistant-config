<?xml version="1.0" encoding="UTF-8"?>
<prompt>
  <name>Extract Home Assistant Entities from Dashboard Files</name>
  <description>
    Extract all unique entities referenced in Home Assistant dashboard YAML files and output them as a deduplicated, alphabetized YAML list.
  </description>
  
  <instructions>
You are tasked with extracting all Home Assistant entities referenced in dashboard YAML files and creating a comprehensive, deduplicated list.

## Process Steps:

1. **Identify Target Files**: Search for all YAML files in the specified directory (typically dashboards/components/panels or similar dashboard structure)

2. **Extract Direct Entity References**: Use grep to find all lines containing "entity:" pattern across all YAML files in the target directory
   - **CRITICAL**: Use high head_limit (1000+) to avoid truncation
   - **CRITICAL**: If truncation occurs, search each file individually
   - **CRITICAL**: Use files_with_matches output mode to get complete file list first

3. **Extract Script Entity References**: Use grep to find all lines containing "script:" pattern across all YAML files
   - Look for both `script: script_name` and `script: script.script_name` patterns
   - Convert script names to proper entity format (add `script.` prefix if missing)
   - **CRITICAL**: Use high head_limit to avoid truncation

4. **Extract Alternative Entity References**: Search for entities referenced with non-standard patterns:
   - Look for `grid:`, `solar:`, `battery:`, `power:`, `voltage:`, `current:`, `load:`, `status:`, `source:`, `temperature:`, `capacity:`, `runtime:`, `charge:`, `level:`, `mode:`, `water:` patterns
   - These may reference entities without using the `entity:` prefix

5. **Extract Templated Entity References**: Search for dynamic entity references in template systems:
   - Look for `entity_id:` patterns (used in lovelace_gen templates)
   - Search for `{{ entity_id }}` or similar template variables
   - Check for entity references in template variable definitions

6. **Extract Entity References from Template Variables**: Search for entity definitions passed to templates:
   - Look for `entity_id: entity_name` patterns in template variable contexts
   - Check for entity lists passed to lovelace_gen templates
   - Search for entity references in `!include` statements with variables

7. **Parse Entity Names**: Extract the actual entity names from lines like:
   - `entity: sensor.temperature`
   - `entity: light.kitchen_lights`
   - `entity_id: camera.front_door`
   - `entity_id: {{ camera.entity_id }}` (template variable)
   - `script: script_name` → `script.script_name`
   - `script: script.script_name` → `script.script_name`

8. **Filter Out Non-Entities**: Exclude special configuration values that are not actual Home Assistant entities:
   - `entity: template` (used in custom:state-switch cards)
   - `entity: user` (used in custom:state-switch cards)
   - Template variables like `{{ camera.entity_id }}` (extract actual values instead)
   - **Camera entities**: Exclude all `camera.*` entities as they cannot be proxied through remote_homeassistant integration
   - **Weather entity replacement**: Replace `weather.local_weather` with `sensor.local_weather_forecast` for remote_homeassistant compatibility (weather entities require service response data which cannot be proxied)
   - Any other non-entity configuration values

9. **Deduplicate**: Remove any duplicate entity names from the list

10. **Alphabetize**: Sort all entities alphabetically by their full entity name

11. **Format Output**: Present the final list in YAML format as:
   ```yaml
   entities:
     - binary_sensor.example_sensor
     - camera.front_door
     - light.example_light
     - sensor.example_temperature
   ```

12. **Verification**: Double-check that all files were searched and no entities were missed due to truncation

## Commands to Use:

```bash
# List directory contents to understand structure
list_dir target_directory="/path/to/dashboards/components/panels"

# Search for direct entity references (use high head_limit to avoid truncation)
grep pattern="entity:" path="/path/to/dashboards/components/panels" output_mode="content" head_limit="1000"

# Search for script entity references (use high head_limit to avoid truncation)
grep pattern="script:" path="/path/to/dashboards/components/panels" output_mode="content" head_limit="1000"

# Search each file individually to ensure no truncation
# For each YAML file found in the directory:
grep pattern="entity:" path="/path/to/dashboards/components/panels/filename.yaml" output_mode="content"
grep pattern="script:" path="/path/to/dashboards/components/panels/filename.yaml" output_mode="content"

# Search for templated entity references (entity_id patterns)
grep pattern="entity_id:" path="/path/to/dashboards/components/panels" output_mode="content"

# Search for template variables in entity contexts
grep pattern="{{.*entity_id.*}}" path="/path/to/dashboards/components/panels" output_mode="content"

# Search for entity references in template variable definitions
grep pattern="entity_id: [a-zA-Z_][a-zA-Z0-9_.]*" path="/path/to/dashboards/components/panels" output_mode="content"

# Search parent directories for template variable definitions
grep pattern="entity_id: [a-zA-Z_][a-zA-Z0-9_.]*" path="/path/to/dashboards" output_mode="content"

# If needed, search for specific non-entity patterns to exclude
grep pattern="entity: template|entity: user" path="/path/to/dashboards/components/panels" output_mode="content" -C="3"

# Search for camera entities to exclude (if needed for verification)
grep pattern="entity: camera\." path="/path/to/dashboards/components/panels" output_mode="content"

# Search for alternative entity reference patterns
grep pattern="grid:|solar:|battery:|power:|voltage:|current:|load:|status:|source:|temperature:|capacity:|runtime:|charge:|level:|mode:|water:" path="/path/to/dashboards/components/panels" output_mode="content"

# Alternative: Use files_with_matches to get all files, then search each individually
grep pattern="entity:" path="/path/to/dashboards/components/panels" output_mode="files_with_matches"
# Then search each file individually to avoid truncation
```

## Output Requirements:

- Provide a complete, alphabetized list of all unique entities
- Use proper YAML formatting with entities as a list under "entities:"
- Include a count of total entities found
- Ensure all entities follow Home Assistant naming conventions (domain.entity_name format)

## Example Usage:

When given a directory like `/home/user/homeassistant-config/dashboards/components/panels`, this prompt will:
1. Scan all YAML files in that directory
2. Extract every direct entity reference (`entity:` patterns) with proper truncation handling
3. Search for templated entity references (`entity_id:` patterns)
4. Look for entity definitions in template variable contexts
5. Search parent directories for template variable definitions
6. Filter out configuration-only values and template variables
7. Verify completeness by checking each file individually if needed
8. Return a clean, alphabetized list ready for use in Home Assistant configurations

This enhanced process handles:
- Static entity references: `entity: sensor.temperature`
- Templated entity references: `entity_id: camera.front_door`
- Dynamic template variables: `{{ camera.entity_id }}` (resolved to actual entity names)
- lovelace_gen template systems and other dynamic dashboard generation
- **Truncation issues**: Uses high head_limit and individual file searches
- **Complete coverage**: Ensures no entities are missed due to output limits
- **Camera exclusion**: Automatically excludes camera entities that cannot be proxied

This is particularly useful for:
- Creating entity lists for dashboard configurations
- Auditing which entities are used across dashboards (including templated ones)
- Generating comprehensive entity inventories
- Preparing entity lists for automation or script development
- Understanding dynamic dashboard systems that use templating
- **Avoiding missing entities**: Handles large files and directories without truncation
- **Remote Home Assistant compatibility**: Excludes camera entities that cannot be proxied and replaces weather entities with sensor equivalents
  </instructions>
  
  <example>
    <title>Enhanced Entity Extraction Example</title>
    <content>
      **Input**: Directory containing Home Assistant dashboard YAML files with templating
      
      **Process**: 
      1. Extract direct entities: `entity: sensor.temperature`
      2. Extract script entities: `script: turn_on_lights` → `script.turn_on_lights`
      3. Extract templated entities: `entity_id: camera.front_door`
      4. Resolve template variables: `{{ camera.entity_id }}` → `camera.front_door`
      5. Search parent directories for template variable definitions
      
      **Output**: 
      ```yaml
      entities:
        - binary_sensor.downstairs_motion
        - light.kitchen_lights
        - sensor.local_weather_forecast
        - sensor.temperature
        - script.turn_on_lights
        - switch.example_switch
      ```
      
      **Total entities found**: 6 (including script and templated entities)
    </content>
  </example>
</prompt>
